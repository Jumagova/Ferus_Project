// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.0
// LVGL version: 8.3.6
// Project name: Ferus_Project_UI

#include "ui.h"
#include "stdio.h"
#include "string.h"
#include "Preferences.h"
#include "storage_memory.h"
#include "motor_functions.h"
#include "timer_interrupt.h"

int quantity = 0;
int hours = 0;
int minutes = 0;
char quantity_text[3];
char hours_text[3];
char minutes_text[3];
const char *foodType[4] = {"Peletizado", "Croquetas", "Mixto", "Cubos de heno"};
char food_selected[10];
int total_time_in_secods = 0;


void foodType1(lv_event_t *e)
{	
	strcpy(food_selected, foodType[0]);
	lv_label_set_text(ui_infoScreenTypeFoodInfo,food_selected);
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveStringData("food_selected",food_selected);
}

void foodType2(lv_event_t *e)
{
	strcpy(food_selected, foodType[1]);
	lv_label_set_text(ui_infoScreenTypeFoodInfo,food_selected);
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveStringData("food_selected",food_selected);
}

void foodType3(lv_event_t *e)
{
	strcpy(food_selected, foodType[2]);
	lv_label_set_text(ui_infoScreenTypeFoodInfo,food_selected);
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveStringData("food_selected",food_selected);
}

void foodType4(lv_event_t *e)
{
	strcpy(food_selected, foodType[3]);
	lv_label_set_text(ui_infoScreenTypeFoodInfo,food_selected);
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveStringData("food_selected",food_selected);
}

void removeSelectQuantityLongPressed(lv_event_t *e)
{
	quantity = quantity - 10;
	if (quantity < 0)
	{
		quantity = 500;
	}
	sprintf(quantity_text, "%d", quantity);
	lv_label_set_text(ui_selectQuantityBodyText, quantity_text);
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveUIntData("quantity",quantity);
}

void removeSelectQuantityClicked(lv_event_t *e)
{
	quantity--;
	if (quantity < 0)
	{
		quantity = 500;
	}
	sprintf(quantity_text, "%d", quantity);
	lv_label_set_text(ui_selectQuantityBodyText, quantity_text);
	lv_label_set_text(ui_infoScreenQuantityInfo,quantity_text);
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveUIntData("quantity",quantity);
}

void addSelectQuantityClicked(lv_event_t *e)
{
	quantity++;
	if (quantity > 500)
	{
		quantity = 0;
	}
	sprintf(quantity_text, "%d", quantity);
	lv_label_set_text(ui_selectQuantityBodyText, quantity_text);
	lv_label_set_text(ui_infoScreenQuantityInfo,quantity_text);
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveUIntData("quantity",quantity);
}

void addSelectQuantityLongPressed(lv_event_t *e)
{
	quantity = quantity + 10;
	if (quantity > 500)
	{
		quantity = 0;
	}
	sprintf(quantity_text, "%d", quantity);
	lv_label_set_text(ui_selectQuantityBodyText, quantity_text);
	lv_label_set_text(ui_infoScreenQuantityInfo,quantity_text);
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveUIntData("quantity",quantity);
}

void removeSelectTimestampClicked(lv_event_t *e)
{
	minutes--;
	if (minutes < 0)
	{
		minutes = 59;
		hours--;
		if (hours < 0)
		{
			hours = 10;
		}
		sprintf(hours_text, "%d", hours);
		lv_label_set_text(ui_selectTimestampBodyText, hours_text);
		lv_label_set_text(ui_infoScreenFrecuencyInfo,hours_text);
	}
	sprintf(minutes_text, "%d", minutes);
	lv_label_set_text(ui_selectTimestampBodyText1, minutes_text);
	lv_label_set_text(ui_infoScreenQuantityInfo,quantity_text);
	lv_label_set_text(ui_infoScreenFrecuencyMinutesInfo,minutes_text);
	total_time_in_secods = hours*3600+minutes*60;
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveUIntData("timestamp",total_time_in_secods);
}

void removeSelectTimestampLongPressed(lv_event_t *e)
{
	minutes=minutes-10;
	if (minutes < 0)
	{
		minutes = 59;
		hours--;
		if (hours < 0)
		{
			hours = 10;
		}
		sprintf(hours_text, "%d", hours);
		lv_label_set_text(ui_selectTimestampBodyText, hours_text);
		lv_label_set_text(ui_infoScreenFrecuencyInfo,hours_text);
	}
	sprintf(minutes_text, "%d", minutes);
	lv_label_set_text(ui_selectTimestampBodyText1, minutes_text);
	lv_label_set_text(ui_infoScreenFrecuencyMinutesInfo,minutes_text);
	total_time_in_secods = hours*3600+minutes*60;
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveUIntData("timestamp",total_time_in_secods);
}

void addSelectTimestampClicked(lv_event_t *e)
{
	minutes++;
	if (minutes > 59)
	{
		minutes = 0;
		hours++;
		if (hours > 10)
		{
			hours = 0;
		}
		sprintf(hours_text, "%d", hours);
		lv_label_set_text(ui_selectTimestampBodyText, hours_text);
		lv_label_set_text(ui_infoScreenFrecuencyInfo,hours_text);

	}
	sprintf(minutes_text, "%d", minutes);
	lv_label_set_text(ui_selectTimestampBodyText1, minutes_text);
	lv_label_set_text(ui_infoScreenFrecuencyMinutesInfo,minutes_text);
	total_time_in_secods = hours*3600+minutes*60;
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveUIntData("timestamp",total_time_in_secods);
}

void addSelectTimestampLongPressed(lv_event_t *e)
{
	minutes=minutes+10;
	if (minutes > 59)
	{
		minutes = 0;
		hours++;
		if (hours > 10)
		{
			hours = 0;
		}
		sprintf(hours_text, "%d", hours);
		lv_label_set_text(ui_selectTimestampBodyText, hours_text);
		lv_label_set_text(ui_infoScreenFrecuencyInfo,hours_text);
	}
	sprintf(minutes_text, "%d", minutes);
	lv_label_set_text(ui_selectTimestampBodyText1, minutes_text);
	lv_label_set_text(ui_infoScreenFrecuencyMinutesInfo,minutes_text);
	total_time_in_secods = hours*3600+minutes*60;
	InternalMemoryStorage& storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveUIntData("timestamp",total_time_in_secods);
}

void initFunction(lv_event_t *e)
{
	TimerManager &timerManager = TimerManager::getInstance();	
	MotorFunctions& motor = MotorFunctions::getInstance();
 	motor.calculateTime();
	motor.turnOnMotor(1);
	timerManager.attachInterrupt(total_time_in_secods);
	lv_label_set_text(ui_infoScreenFuctionInfo,"Alimentador en funcionamiento");
}

void forceDistributionFunction(lv_event_t *e)
{
	MotorFunctions& motor = MotorFunctions::getInstance();
 	motor.calculateTime();
	motor.turnOnMotor(1);
}

void stopFunction(lv_event_t *e)
{

	TimerManager &timerManager = TimerManager::getInstance();
	MotorFunctions& motor = MotorFunctions::getInstance();
	timerManager.detachInterrupt();
	motor.turnOffMotor();
	lv_label_set_text(ui_infoScreenFuctionInfo,"Alimentador en pausa");
}
