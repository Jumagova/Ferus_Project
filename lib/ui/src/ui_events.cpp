// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.0
// LVGL version: 8.3.6
// Project name: Ferus_Project_UI

#include "ui.h"
#include "stdio.h"
#include "string.h"
#include "Preferences.h"
#include "storage_memory.h"
#include "motor_functions.h"
#include "timer_interrupt.h"
#include "feeder_settings.h"


void foodType1(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.selectFood(0);

	
}

void foodType2(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.selectFood(1);

}

void foodType3(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.selectFood(2);

}

void foodType4(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.selectFood(3);

}

void removeSelectQuantityLongPressed(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.removeQuantity(10);

}

void removeSelectQuantityClicked(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.removeQuantity(1);
}

void addSelectQuantityClicked(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.addQuantity(1);
}

void addSelectQuantityLongPressed(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.addQuantity(10);
}

void removeSelectTimestampClicked(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.removeTime(1);

}

void removeSelectTimestampLongPressed(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.removeTime(10);

}

void addSelectTimestampClicked(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.addTime(1);

}

void addSelectTimestampLongPressed(lv_event_t *e)
{
	FeederSettings &settings = FeederSettings::getInstance();
	settings.addTime(10);

}

void initFunction(lv_event_t *e)
{
	uint32_t total_time_in_seconds;

	lv_label_set_text(ui_infoScreenFuctionInfo, "Alimentador en funcionamiento");

	TimerManager &timerManager = TimerManager::getInstance();



	InternalMemoryStorage &storage = InternalMemoryStorage::getInstance("storage_data");
	storage.saveBoolData("isActivated", true);
	storage.getUIntData("timestamp",total_time_in_seconds);

	timerManager.attachInterrupt(total_time_in_seconds);

	MotorFunctions &motor = MotorFunctions::getInstance();
	motor.calculateTime();
	motor.turnOnMotor(1);
}

void forceDistributionFunction(lv_event_t *e)
{
	MotorFunctions &motor = MotorFunctions::getInstance();
	motor.calculateTime();
	motor.turnOnMotor(1);
}

void stopFunction(lv_event_t *e)
{

	TimerManager &timerManager = TimerManager::getInstance();
	MotorFunctions &motor = MotorFunctions::getInstance();
	InternalMemoryStorage &storage = InternalMemoryStorage::getInstance("storage_data");

	timerManager.detachInterrupt();
	storage.saveBoolData("isActivated", false);
	motor.turnOffMotor();
	lv_label_set_text(ui_infoScreenFuctionInfo, "Alimentador en pausa");
}
